seml:
  executable: experiments/main_wi.py
  name: train_wi
  output_dir: /nfs/students/ayle/RobustnessDetectionPrunedNetworks/logs
  project_root_dir: ..
  conda_environment: inv

slurm:
  experiments_per_job: 1
  sbatch_options:
    gres: gpu:1       # num GPUs
    mem: 16G          # memory
    cpus-per-task: 1  # num cores
    time: 0-1:00     # max time, D-HH:MM
    partition: ['gpu_all']
    exclude: mdsi-gpu01,mdsi-gpu02,gpu18,gpu19,gpu15,gpu16,gpu17
#    qos: interactive

###### BEGIN PARAMETER CONFIGURATION ######

fixed:
  arguments:
    # use below three arguments to find the checkpoint model you want to test in the results directory specified below
    prune_criterion: EmptyCrit
    seed: 1234
    pruning_limit: 0.0

    model: ResNet18
    data_set: CIFAR10
    eval_ood_data_sets: ['SVHN']
    eval_attacks: ['FGSM']
    eval_epsilons: [8]
    with_augmentations: 0
    wi_pruning: 0.0
    test_batch_size: 2
    num_samples: 10000000
    with_standard: 0
    device: cuda

    results_dir: 'ResNet18'
    checkpoint_name: None
    checkpoint_model: "ResNet18_finished.pickle"

    disable_cuda_benchmark: 1  # speedup (disable) vs reproducibility (leave it)
    eval: 0
    disable_autoconfig: 0  # for the brave
    preload_all_data: 0  # load all data into ram memory for speedups

    get_hooks: 0
    disable_masking: 1  # disable the ability to prune unstructured
    enable_rewinding: 0  # enable the ability to rewind to previous weights
    outer_layer_pruning: 1  # allow to prune outer layers (unstructured) or not (structured)

    # not needed
    eval_freq: 1000  # evaluate every n batches
    save_freq: 1e6  # save model every n epochs, besides before and after training
    batch_size: 512 # 128  # size of batches, for Imagenette 128
    max_training_minutes: 6120  # one hour and a 45 minutes max, process killed after n minutes (after finish of epoch)
    plot_weights_freq: 10  # plot pictures to tensorboard every n epochs
    prune_freq: 1  # if pruning during training: how long to wait between pruning events after first pruning
    prune_delay: 0  # "if pruning during training: how long to wait before pruning first time
    lower_limit: 0.5
    epochs: 50
    rewind_to: 6  # rewind to this epoch if rewinding is done
    snip_steps: 6  # 's' in algorithm box, number of pruning steps for 'rule of thumb', TODO
    snip_iter: 5
    pruning_rate: 0.00  # pruning rate passed to criterion at pruning event. however, most override this
    local_pruning: 0
    prune_to: 10
    learning_rate: 2e-3 # 0.1 # 2e-3
    grad_clip: 10
    grad_noise: 0  # added gaussian noise to gradients
    l2_reg: 5e-5  # weight decay
    l1_reg: 0  # l1-norm regularisation
    lp_reg: 0  # lp regularisation with p < 1
    loss: CrossEntropy
    optimizer: ADAM
    ood_prune_data_set: SVHN
    ood_data_set: SVHN
    train_scheme: DefaultTrainer  # default: DefaultTrainer
    attack: FGSM
    epsilon: 8

    disable_histograms: 0
    disable_saliency: 0
    disable_confusion: 0
    disable_weightplot: 0
    disable_netplot: 0
    skip_first_plot: 0
    disable_activations: 0

#hoyer_square:
#  fixed:
#    arguments:
#      loss: "HoyerSquare"
#      prune_criterion: "HoyerSquare"

#MNIST:
#  fixed:
#    arguments:
#      input_dim: [1, 28, 28]
#      output_dim: 10
#      hidden_dim: [512]
#      N: 60000
#      mean: (0.1307,)
#      std: (0.3081,)

CIFAR10:
  fixed:
    arguments:
      input_dim: [3, 32, 32]
      output_dim: 10
      hidden_dim: [512]
      N: 60000
      mean:  (0.4914, 0.4822, 0.4465)
      std: (0.2471, 0.2435, 0.2616)

#CIFAR100:
#  fixed:
#    arguments:
#      input_dim: [3, 32, 32]
#      output_dim: 100
#      hidden_dim: [512]
#      N: 50000
#      mean:  (0.5071, 0.4865, 0.4409)
#      std: (0.2673, 0.2564, 0.2762)

#    pruning_limit:
#      type: choice
#      options:
#        - 0.4
#        - 0.5
#        - 0.75
#        - 0.9
#        - 0.95
#        - 0.98

# l0:
#   fixed:
#     arguments:
#       loss: "L0CrossEntropy"
#       train_scheme: "L0Trainer"
#       prune_criterion: "EmptyCrit"
#       pruning_rate: 0.0
#       growing_rate: 0.0
#       outer_layer_pruning: True
#       disable_weightplot: False
#       disable_netplot: False
#       prune_delay: 10000000000000

# group_hoyer_square:
#   fixed:
#     arguments:
#       loss: "GroupHoyerSquare"
#       prune_criterion: "GroupHoyerSquare"

# FASHION:
#   fixed:
#     arguments:
#       input_dim: [1, 28, 28]
#       output_dim: 10
#       hidden_dim: [512]
#       N: 60000
#       mean: (0.2860,)
#        std: (0.3530,)

# OMNIGLOT:
#   fixed:
#     arguments:
#       input_dim: [
#                 1,
#                 105,
#                 105
#         ]
#       output_dim: 1623
#       hidden_dim: [
#                 512
#         ]
#       N: 19456

# "CIFAR10": {
#         "input_dim": [
#                 3,
#                 32,
#                 32
#         ],
#         "output_dim": 10,
#         "hidden_dim": [
#                 512
#         ],
#         "N": 50000
# },



# "TEST@HOME": {
#         "input_dim": [
#                 3,
#                 244,
#                 244
#         ],
#         "output_dim": 2,
#         "hidden_dim": [
#                 128
#         ],
#         "N": -1
# },
# "RUBBISH": {
#         "input_dim": [
#                 1,
#                 3,
#                 3
#         ],
#         "output_dim": 2,
#         "hidden_dim": [
#                 512
#         ],
#         "N": 10000
# },
# "TINYIMAGENET": {
#         "input_dim": [
#                 3,
#                 128,
#                 128
#         ],
#         "output_dim": 20000,
#         "hidden_dim": [
#                 512
#         ],
#         "N": 100096
# },
# "IMAGENETTE": {
#         "input_dim": [
#                 3,
#                 128,
#                 128
#         ],
#         "output_dim": 10,
#         "hidden_dim": [
#                 512
#         ],
#         "N": 12928
#mean = [0.485, 0.456, 0.406]
#    std = [0.229, 0.224, 0.225]
# },
# "IMAGEWOOF": {
#         "input_dim": [
#                 3,
#                 128,
#                 128
#         ],
#         "output_dim": 10,
#         "hidden_dim": [
#                 512
#         ],
#         "N": 12928
#mean = [0.485, 0.456, 0.406]
#    std = [0.229, 0.224, 0.225]
